name: build

on:
  push:
  pull_request:
  schedule:
    - cron: 0 1 * * MON
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        host: [ host ]
        gcc:
          - 10.3.0
          - 11.2.0
          - 4.2.1
          - 5.3.0
          - 6.5.0
          - 7.5.0
          - 8.5.0
          - 9.2.0
          - 9.4.0
        target:
          - aarch64-linux-musl
          - x86_64-linux-musl
        exclude:
          - gcc: 4.2.1
          - gcc: 5.3.0
        include:
          - host: devcontainer
            gcc: 9.4.0
            target: aarch64-linux-musl
          - host: devcontainer
            gcc: 9.4.0
            target: x86_64-linux-musl
          - host: host
            gcc: 9.4.0
            target: i386-linux-musl
          - host: host
            gcc: 9.4.0
            target: arm-linux-musleabi
          - host: host
            gcc: 9.4.0
            target: arm-linux-musleabihf
          - host: host
            gcc: 9.4.0
            target: mips-linux-musl
          - host: host
            gcc: 9.4.0
            target: powerpc-linux-musl
          - host: host
            gcc: 9.4.0
            target: riscv64-linux-musl
          - host: host
            gcc: 9.4.0
            target: s390x-linux-musl
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        submodules: true
    - uses: ./.github/workflows/actions/devcontainer
      if: ${{ matrix.host == 'devcontainer' }}
      id: devcontainer
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: setup
      run: |
        case "${{ matrix.host }}" in
        devcontainer)
          echo "EXEC=${{ steps.devcontainer.outputs.exec }}" >> $GITHUB_ENV
          ;;
        host)
          echo "::group::apt"
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get -y install --no-install-recommends ccache
          ;;
        esac
    - name: ccache
      uses: actions/cache@v3
      id: ccache
      with:
        path: .ccache
        key: ccache-${{ matrix.host }}-${{ matrix.gcc }}-${{ matrix.target}}-${{ hashFiles('Makefile','config.mak.musl') }}
        restore-keys: |
          ccache-${{ matrix.host }}-${{ matrix.gcc }}-${{ matrix.target}}
    - name: sources
      uses: actions/cache@v3
      with:
        path: musl-cross-make/sources
        key: sources-${{ matrix.gcc }}-${{ hashFiles('musl-cross-make/Makefile') }}
        restore-keys: |
          sources-${{ matrix.gcc }}
    - name: build
      run: |
        if [ ! -d .ccache ]; then
          echo "::group::ccache-init"
          ${{ env.EXEC }} make ccache-init
          echo "::endgroup::"
        fi
        if [ -d musl-cross-make/sources ]; then
          touch musl-cross-make/sources/*
        fi
        echo "::group::Apply patches"
        ${{ env.EXEC }} make patches.apply
        echo "::endgroup::"
        ${{ env.EXEC }} .github/workflows/quiet.sh make build,${{ matrix.gcc }},${{ matrix.target }}
    - name: install
      run: |
        echo "::group::ccache-stat"
        ${{ env.EXEC }} make ccache-stat
        ${{ env.EXEC }} .github/workflows/quiet.sh make install,${{ matrix.gcc }},${{ matrix.target }}
        echo "::group::size"
        du -sh out/${{ matrix.gcc }}/${{ matrix.target }}
    - name: test
      run: |
        if [ "${{ matrix.host }}"  = host ]; then
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -y install --no-install-recommends qemu-user
        fi
        ${{ env.EXEC }} make test,${{ matrix.gcc }},${{ matrix.target }}
    - name: archive
      run: |
        set -x
        tar='musl-cross-${{ matrix.target }}-gcc${{ matrix.gcc }}-${{ matrix.host }}.tar'
        tar -cf $tar -C out/${{ matrix.gcc }}/${{ matrix.target }} .
        xz --keep --compress -9 --threads 0 $tar
        du -sh ${tar}*
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: musl-cross-${{ matrix.target }}-gcc${{ matrix.gcc }}-${{ matrix.host }}
        path: musl-cross-${{ matrix.target }}-gcc${{ matrix.gcc }}-${{ matrix.host }}.tar.xz
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        path: out.tar
    - name: setup
      run: |
        sudo apt-get update
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -y install --no-install-recommends qemu-user
    - name: Test
      run: |
        for f in out.tar/*/* ; do
          echo "::group::Testing $(basename $f)"
          ./test.sh $f out.test hello.c
        done
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - uses: actions/download-artifact@v3
    - name: upload release
      uses: softprops/action-gh-release@v1
      with:
        files: '*/*-host.tar.xz'
